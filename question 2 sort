#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
using namespace std;

bool isPrime(int n) {
    if (n <= 1) return false;
    for (int i = 2; i <= sqrt(n); ++i) {
        if (n % i == 0) return false;
    }
    return true;
}

vector<int> primeSort(vector<int>& arr) {
    vector<int> primes;
    vector<int> nonPrimes;

   
    for (int num : arr) {
        if (isPrime(num)) {
            primes.push_back(num);
        } else {
            nonPrimes.push_back(num);
        }
    }

   
    sort(primes.begin(), primes.end(), greater<int>());

    
    sort(nonPrimes.begin(), nonPrimes.end(), greater<int>());


    vector<int> result;

    if (!primes.empty()) {
        result.push_back(primes.front());  
    }

    
    result.insert(result.end(), nonPrimes.begin(), nonPrimes.end());

    if (!primes.empty()) {
        result.push_back(primes.back()); 
    }

    return result;
}

int main() {
    vector<int> arr1 = {5, 1, 8, 11, 2};
    vector<int> result1 = primeSort(arr1);
    for (int num : result1) {
        cout << num << " ";
    }
    cout << endl;

    vector<int> arr2 = {1, 6, 4, 13, 9, 3};
    vector<int> result2 = primeSort(arr2);
    for (int num : result2) {
        cout << num << " ";
    }
    cout << endl;

    return 0;
}
